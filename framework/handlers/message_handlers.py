import json
import os
import logging
from typing import Dict, Any, Optional
from aiogram import types
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from aiogram.enums import ChatType
from framework.agents.base import BaseAgent
from framework.agents.message_agent import MessageAgent
from framework.agents.image_agent import ImageAgent
from framework.agents.document_agent import DocumentAgent
from framework.agents.web_search_agent import WebSearchAgent
from framework.agents.web_browser_agent import WebBrowserAgent
from framework.services.file_service import FileService
from framework.utils.logger import setup_logger

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

class MessageHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.logger = logging.getLogger(__name__)
        self.file_service = FileService(config)
        self.bot = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ –∏–∑ BotManager
        self.agents = {
            'document': DocumentAgent(config),
            'image': ImageAgent(config),
            'web_search': WebSearchAgent(config),
            'web_browser': WebBrowserAgent(config),
            'message': MessageAgent(config)
        }

    async def handle_command_start(self, message: Message, command: CommandObject) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        response = ("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –Ø –º–æ–≥—É:\n"
                   "- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
                   "- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
                   "- –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n"
                   "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç!")
        
        if message.chat.type != ChatType.PRIVATE:
            await message.reply(response)
        else:
            await message.answer(response)
        return {"action": "send_message", "text": response}

    async def handle_command_help(self, message: Message, command: CommandObject) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        response = ("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                   "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                   "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                   "/search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")
        
        if message.chat.type != ChatType.PRIVATE:
            await message.reply(response)
        else:
            await message.answer(response)
        return {"action": "send_message", "text": response}

    async def handle_command_search(self, message: Message, command: CommandObject) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search"""
        query = command.args
        if not query:
            response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /search"
        else:
            try:
                search_response = await self.agents['web_search'].process_message(query, message.from_user.id, message.chat.id)
                response = search_response.get("text", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}")
                response = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞"
        
        if message.chat.type != ChatType.PRIVATE:
            await message.reply(response)
        else:
            await message.answer(response)
        return {"action": "send_message", "text": response}

    async def handle_message(self, message: Message) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if message.chat.type == ChatType.PRIVATE:
            return await self.handle_private_message(message)
        else:
            return await self.handle_group_message(message)
        
    async def handle_private_message(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
            response = await self.agents['message'].process_message(
                message=message.text,
                chat_id=message.chat.id,
                message_id=message.message_id
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await message.answer(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    async def handle_group_message(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
            if not await self._is_bot_mentioned(message):
                return

            # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            text = message.text
            bot_username = self.config['bot']['username']
            bot_name = self.config['bot']['name']
            text = text.replace(f"@{bot_username}", "").replace(bot_name, "").strip()

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = await self.agents['message'].process_message(text, message.from_user.id, message.chat.id)
            if response and response.get('text'):
                await message.reply(response['text'])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            
    async def handle_photo(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
            
            if not self.bot:
                logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ MessageHandlers")
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–æ—Ç–æ
            photo_data = await self.file_service.get_photo_content(message, self.bot)
            if not photo_data:
                await message.answer("–û–π-–æ–π! üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë –µ—â–µ —Ä–∞–∑!")
                return
                
            if 'error' in photo_data:
                await message.answer(photo_data['message'])
                return
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ ImageAgent
            try:
                response = await self.agents['image'].process_image(
                    photo_data['content'],
                    message.from_user.id,
                    message.message_id
                )
                
                if not response or 'text' not in response:
                    logger.error("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç ImageAgent")
                    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üòî")
                    return
                    
                logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                logger.debug(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:\n{response['text']}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç, –∑–∞–º–µ–Ω—è—è HTML-—Ç–µ–≥–∏ –Ω–∞ –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                text = response['text'].replace("<br>", "\n").replace("</br>", "\n")
                text = text.replace("<br/>", "\n").replace("<br />", "\n")
                
                await message.answer(text)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}", exc_info=True)
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ! üé®")
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    async def handle_document(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            # –í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
            if message.chat.type != 'private':
                if not await self._is_bot_mentioned(message):
                    return

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ FileService
            doc_data = await self.file_service.get_document_content(message, message.bot)
            
            if not doc_data:
                error_message = "–û–π-–æ–π! üòÖ –°–ª–∞–π–º –Ω–µ –≤–∏–¥–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑! üìÑ"
                if message.chat.type != 'private':
                    await message.reply(error_message)
                else:
                    await message.answer(error_message)
                return
                
            if 'error' in doc_data:
                if message.chat.type != 'private':
                    await message.reply(doc_data['message'])
                else:
                    await message.answer(doc_data['message'])
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = "–°–ª–∞–π–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç... üîç"
            sent_message = await message.answer(processing_message) if message.chat.type == 'private' else await message.reply(processing_message)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ DocumentAgent
            response = await self.agents['document'].process_document(
                doc_data['content'],
                message.from_user.id,
                message.chat.id
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            try:
                await sent_message.delete()
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
            
            if response and response.get('text'):
                if message.chat.type != 'private':
                    await message.reply(response['text'])
                else:
                    await message.answer(response['text'])
            else:
                error_message = "–û–π-–æ–π! üò¢ –°–ª–∞–π–º –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π? üìÑ"
                if message.chat.type != 'private':
                    await message.reply(error_message)
                else:
                    await message.answer(error_message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if message.chat.type != 'private':
                await message.reply(error_message)
            else:
                await message.answer(error_message)
        
    def _is_group_allowed(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ –≥—Ä—É–ø–ø–∞"""
        allowed_groups = self.config['bot'].get('allowed_groups', [])
        return not allowed_groups or chat_id in allowed_groups
        
    async def _is_bot_mentioned(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        if not message.text and not message.caption:
            return False

        text = message.text or message.caption
        bot_username = self.config['bot']['username']
        bot_name = self.config['bot']['name']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ
        text_lower = text.lower()
        return (
            f"@{bot_username}".lower() in text_lower or
            bot_name.lower() in text_lower
        )
        
    async def _remove_bot_mention(self, message: Message) -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not message.text:
            return ""
            
        bot = await message.bot.get_me()
        bot_username = bot.username.lower()
        text = message.text
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
        if text.lower().startswith(f"/{bot_username}"):
            text = text[len(bot_username) + 1:].strip()
            
        # –£–¥–∞–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if message.entities:
            for entity in reversed(message.entities):
                if entity.type == "mention":
                    mention = text[entity.offset:entity.offset + entity.length]
                    if mention.lower() == f"@{bot_username}":
                        text = text[:entity.offset].strip() + " " + text[entity.offset + entity.length:].strip()
                    
        return text.strip() 