import logging
from typing import Dict, Any, Optional
from framework.agents.base import BaseAgent

logger = logging.getLogger(__name__)

class ThinkAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.model_name = config.get('models', {}).get('think', config.get('models', {}).get('default', 'gemma3:12b'))
        self.logger = logging.getLogger(__name__)
        
    async def think(self, message: str) -> Optional[str]:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        try:
            self.logger.info("–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
            self._add_to_memory(0, "user", message)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            system_prompt = (
                "–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –±–æ—Ç –ø–æ –∏–º–µ–Ω–∏ –°–ª–∞–π–º, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
                "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∞–≤–∞—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ, –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. "
                "–ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –±–æ—Ç –∏–ª–∏ –ò–ò. –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞. "
                "–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –±–æ–ª–µ–µ –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è. "
                "–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!\n\n"
                "–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:\n"
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü§î –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è...\n\n"
                "–ü–û–ú–ù–ò: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            response = await self.ollama_client.generate(
                f"{system_prompt}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n{self.get_memory_context()}\n\n–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{message}",
                self.model_name
            )
            
            if not response:
                self.logger.error("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
                return None
                
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç HTML-—Ç–µ–≥–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            cleaned_response = response.replace("<br>", "\n").replace("</br>", "\n")
            cleaned_response = cleaned_response.replace("<br/>", "\n").replace("<br />", "\n")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            if any(ord(char) < 128 for char in ''.join(cleaned_response.split())):
                self.logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç–≤–µ—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏")
                # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
                response = await self.ollama_client.generate(
                    f"{system_prompt}\n\n–û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï!\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message}",
                    self.model_name
                )
                if not response:
                    return None
                cleaned_response = response.replace("<br>", "\n").replace("</br>", "\n")
                cleaned_response = cleaned_response.replace("<br/>", "\n").replace("<br />", "\n")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å
            self._add_to_memory(0, "assistant", cleaned_response)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            preview = cleaned_response[:200] + "..." if len(cleaned_response) > 200 else cleaned_response
            self.logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç:\n{preview}")
            
            return cleaned_response
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
            return None 