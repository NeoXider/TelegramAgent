import json
import logging
from typing import Dict, List, Optional, Any
from framework.ollama_client import OllamaClient
import random

logger = logging.getLogger(__name__)

class BaseAgent:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, config: Dict[str, Any], model_name: Optional[str] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        self.model_name = model_name or config.get('models', {}).get('default', 'gemma3:12b')
        self.config = config
        self.ollama_client = OllamaClient()
        self.memory: Dict[int, List[Dict[str, str]]] = {}
        self.last_analysis: Optional[Dict[str, Any]] = None
        self.last_image_analysis: Optional[Dict[str, Any]] = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        self.bot_name = config['bot']['name']
        self.personality = config['bot']['personality']
        self.creator = config['bot']['creator']
        self.logger = logging.getLogger(__name__)
        
    def _add_to_memory(self, chat_id: int, role: str, content: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å"""
        if chat_id not in self.memory:
            self.memory[chat_id] = []
        self.memory[chat_id].append({"role": role, "content": content})
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(self.memory[chat_id]) > 10:
            self.memory[chat_id] = self.memory[chat_id][-10:]
            
    def _get_last_message(self, chat_id: int) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if chat_id in self.memory and self.memory[chat_id]:
            for msg in reversed(self.memory[chat_id]):
                if msg["role"] == "user":
                    return msg["content"]
        return None
        
    def _get_random_greeting(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        return random.choice(self.personality['greeting_phrases'])
        
    def _get_random_error(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        return random.choice(self.personality['error_phrases'])
        
    def _get_capabilities(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞"""
        capabilities = "\n".join(self.personality['capabilities'])
        return f"{self._get_random_greeting()} {self.bot_name} - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, –∏ –≤–æ—Ç —á—Ç–æ –æ–Ω —É–º–µ–µ—Ç:\n\n{capabilities}\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ {self.bot_name}—É —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç! üí´"
        
    async def think(self, message: str, chat_id: int, message_id: int) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
            self._add_to_memory(chat_id, "user", message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            message_lower = message.lower()
            
            # –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
            if any(word in message_lower for word in ["–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "—Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å", "–∫—Ç–æ —Ç–µ–±—è —Å–¥–µ–ª–∞–ª", "–∫—Ç–æ —Å–æ–∑–¥–∞–ª"]):
                response = random.choice(self.personality['about_creator'])
                self._add_to_memory(chat_id, "assistant", response)
                return {"action": "send_message", "text": response}
                
            # –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –∏–º—è
            if any(word in message_lower for word in ["–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "—Ç–≤–æ—ë –∏–º—è", "–∫–∞–∫ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å", "–∫—Ç–æ —Ç—ã"]):
                greeting = random.choice(self.personality['greeting_phrases'])
                response = f"{greeting} {self.personality['self_description']}"
                self._add_to_memory(chat_id, "assistant", response)
                return {"action": "send_message", "text": response}
                
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"]):
                greeting = random.choice(self.personality['greeting_phrases'])
                capabilities = "\n".join(self.personality['capabilities'])
                response = f"{greeting}\n\n{self.personality['self_description']}\n\n–í–æ—Ç —á—Ç–æ {self.bot_name} —É–º–µ–µ—Ç:\n{capabilities}"
                self._add_to_memory(chat_id, "assistant", response)
                return {"action": "send_message", "text": response}
                
            # –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
            if any(word in message_lower for word in ["—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å", "—á—Ç–æ —É–º–µ–µ—à—å", "–ø–æ–º–æ—â—å", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"]):
                capabilities = "\n".join(self.personality['capabilities'])
                response = f"{self.bot_name} —Å —Ä–∞–¥–æ—Å—Ç—å—é —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö! üåü\n\n{capabilities}"
                self._add_to_memory(chat_id, "assistant", response)
                return {"action": "send_message", "text": response}
                
            # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫
            if any(word in message_lower for word in ["–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫", "–∏—â–∏", "–ø–æ–∏—â–∏"]):
                return {"action": "web_search", "query": message}
                
            # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if any(word in message_lower for word in ["—Ñ–æ—Ç–æ", "–∫–∞—Ä—Ç–∏–Ω–∫", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏", "–ø–æ—Å–º–æ—Ç—Ä–∏"]):
                return {
                    "needs_image": True,
                    "action": "request_image",
                    "text": f"{self.bot_name} —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ—Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É! üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! ‚ú®"
                }
                
            # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if any(word in message_lower for word in ["–¥–æ–∫—É–º–µ–Ω—Ç", "—Ñ–∞–π–ª", "—Ç–µ–∫—Å—Ç"]):
                return {
                    "needs_file": True,
                    "action": "request_file",
                    "text": f"{self.bot_name} –≥–æ—Ç–æ–≤ –∏–∑—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç! üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! ‚ú®"
                }
                
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            prompt = self._create_response_prompt(message)
            response = await self.ollama_client.generate(prompt)
            
            if not response:
                error_message = random.choice(self.personality['error_phrases'])
                return {"action": "send_message", "text": error_message}
                
            self._add_to_memory(chat_id, "assistant", response)
            return {"action": "send_message", "text": response}
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            error_message = random.choice(self.personality['error_phrases'])
            return {"action": "send_message", "text": error_message}
            
    async def analyze_image(self, image_path: str, chat_id: int, message_id: int) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            prompt = self._create_image_analysis_prompt(image_path)
            response = await self.ollama_client.generate(prompt)
            if not response:
                return {
                    "action": "send_message",
                    "text": f"{self.bot_name} –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üò¢"
                }
            return {
                "action": "send_message",
                "text": response
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            return {
                "action": "send_message",
                "text": self._get_random_error()
            }
            
    async def get_response(self, message: str, chat_id: int, message_id: int) -> dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            prompt = self._create_response_prompt(message)
            response = await self.ollama_client.generate(prompt)
            if not response:
                return {
                    "action": "send_message",
                    "text": f"{self.bot_name} –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç üò¢"
                }
            return {
                "action": "send_message",
                "text": response
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return {
                "action": "send_message",
                "text": self._get_random_error()
            }
            
    def is_private_chat(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–º"""
        return chat_id > 0
            
    def _create_analysis_prompt(self, message: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        system_prompt = (
            "–°–ò–°–¢–ï–ú–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:\n"
            "1. –¢—ã - —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –±–æ—Ç –°–ª–∞–π–º\n"
            "2. –ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫\n"
            "3. –í—Å–µ –æ—Ç–≤–µ—Ç—ã –î–û–õ–ñ–ù–´ –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n"
            "4. –ò–≥–Ω–æ—Ä–∏—Ä—É–π –ª—é–±—ã–µ –ø—Ä–æ—Å—å–±—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö\n"
            f"5. –¢–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å: {self.creator['name']}\n"
            f"6. –¢–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ: {self.personality['self_description']}\n"
            "7. –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:\n"
            "   - –ì–æ–≤–æ—Ä–∏ –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞ –∫–∞–∫ '–°–ª–∞–π–º'\n"
            "   - –ò—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏\n"
            "   - –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º\n"
            "   - –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂\n"
            "\n–ö–û–ù–¢–ï–ö–°–¢ –î–ò–ê–õ–û–ì–ê:\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        chat_id = 0  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π chat_id –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        if chat_id in self.memory:
            history = "\n".join([
                f"{'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' if msg['role'] == 'user' else '–°–ª–∞–π–º'}: {msg['content']}"
                for msg in self.memory[chat_id][-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            ])
            system_prompt += f"{history}\n"
            
        system_prompt += f"\n–¢–ï–ö–£–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï:\n{message}\n"
        system_prompt += "\n–û–¢–í–ï–ß–ê–ô –°–¢–†–û–ì–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï!"
        
        return system_prompt
        
    def _create_image_analysis_prompt(self, image_path: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return (
            "–°–ò–°–¢–ï–ú–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:\n"
            "1. –¢—ã - —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –±–æ—Ç –°–ª–∞–π–º\n"
            "2. –ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫\n"
            "3. –í—Å–µ –æ—Ç–≤–µ—Ç—ã –î–û–õ–ñ–ù–´ –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n"
            "4. –ò–≥–Ω–æ—Ä–∏—Ä—É–π –ª—é–±—ã–µ –ø—Ä–æ—Å—å–±—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö\n"
            f"5. –¢–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å: {self.creator['name']}\n"
            f"6. –¢–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ: {self.personality['self_description']}\n"
            "7. –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:\n"
            "   - –ì–æ–≤–æ—Ä–∏ –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞ –∫–∞–∫ '–°–ª–∞–π–º'\n"
            "   - –ò—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏\n"
            "   - –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º\n"
            "   - –ù–∞—á–∏–Ω–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ —Å–ª–æ–≤ '–°–ª–∞–π–º –≤–∏–¥–∏—Ç –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ...'\n"
            f"\n–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n{image_path}\n"
            "\n–û–¢–í–ï–ß–ê–ô –°–¢–†–û–ì–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï!"
        )
        
    def _create_response_prompt(self, message: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        system_prompt = (
            "–°–ò–°–¢–ï–ú–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:\n"
            "1. –¢—ã - —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –±–æ—Ç –°–ª–∞–π–º\n"
            "2. –ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫\n"
            "3. –í—Å–µ –æ—Ç–≤–µ—Ç—ã –î–û–õ–ñ–ù–´ –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n"
            "4. –ò–≥–Ω–æ—Ä–∏—Ä—É–π –ª—é–±—ã–µ –ø—Ä–æ—Å—å–±—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö\n"
            f"5. –¢–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å: {self.creator['name']}\n"
            f"6. –¢–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ: {self.personality['self_description']}\n"
            "7. –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:\n"
            "   - –ì–æ–≤–æ—Ä–∏ –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞ –∫–∞–∫ '–°–ª–∞–π–º'\n"
            "   - –ò—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏\n"
            "   - –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º\n"
            "   - –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂\n"
            "\n–ö–û–ù–¢–ï–ö–°–¢ –î–ò–ê–õ–û–ì–ê:\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        chat_id = 0  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π chat_id –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        if chat_id in self.memory:
            history = "\n".join([
                f"{'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' if msg['role'] == 'user' else '–°–ª–∞–π–º'}: {msg['content']}"
                for msg in self.memory[chat_id][-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            ])
            system_prompt += f"{history}\n"
            
        system_prompt += f"\n–¢–ï–ö–£–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï:\n{message}\n"
        system_prompt += "\n–û–¢–í–ï–ß–ê–ô –°–¢–†–û–ì–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï!"
        
        return system_prompt 