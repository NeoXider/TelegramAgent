import logging
from typing import Optional, Dict, Any
from aiogram import Bot
from aiogram.types import Message

logger = logging.getLogger(__name__)

class FileService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.max_file_size = config.get('file_limits', {}).get('max_size', 20 * 1024 * 1024)  # 20MB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
    async def get_photo_content(self, message: Message, bot: Bot) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if not message.photo:
                logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ")
                return None
                
            # –ë–µ—Ä–µ–º —Å–∞–º—É—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
            photo = message.photo[-1]
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: file_id={photo.file_id}, —Ä–∞–∑–º–µ—Ä={photo.file_size}, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ={photo.width}x{photo.height}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if photo.file_size and photo.file_size > self.max_file_size:
                logger.warning(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {photo.file_size} –±–∞–π—Ç")
                return {
                    'error': 'size_limit',
                    'message': "–û–π-–æ–π! üòÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ–º–µ–Ω—å—à–µ! üñºÔ∏è"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file = await bot.get_file(photo.file_id)
            if not file:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")
                return {
                    'error': 'file_not_found',
                    'message': "–û–π-–æ–π! üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑!"
                }
                
            # –°–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            file_content = await bot.download_file(file.file_path)
            if not file_content:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
                return {
                    'error': 'download_failed',
                    'message': "–û–π-–æ–π! üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑!"
                }
                
            return {
                'file_id': photo.file_id,
                'file_size': photo.file_size,
                'width': photo.width,
                'height': photo.height,
                'content': file_content,
                'mime_type': 'image/jpeg'  # Telegram –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ –≤ JPEG
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {str(e)}", exc_info=True)
            return {
                'error': 'unknown',
                'message': "–û–π-–æ–π! üò± –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
            }
            
    async def get_document_content(self, message: Message, bot: Bot) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if not message.document:
                logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç")
                return None
                
            document = message.document
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: file_id={document.file_id}, —Ä–∞–∑–º–µ—Ä={document.file_size}, –∏–º—è={document.file_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if document.file_size and document.file_size > self.max_file_size:
                logger.warning(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {document.file_size} –±–∞–π—Ç")
                return {
                    'error': 'size_limit',
                    'message': "–û–π-–æ–π! üòÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø–æ–º–µ–Ω—å—à–µ!"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file = await bot.get_file(document.file_id)
            if not file:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")
                return {
                    'error': 'file_not_found',
                    'message': "–û–π-–æ–π! üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –µ—â–µ —Ä–∞–∑!"
                }
                
            # –°–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            file_content = await bot.download_file(file.file_path)
            if not file_content:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
                return {
                    'error': 'download_failed',
                    'message': "–û–π-–æ–π! üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –µ—â–µ —Ä–∞–∑!"
                }
                
            return {
                'file_id': document.file_id,
                'file_size': document.file_size,
                'file_name': document.file_name,
                'mime_type': document.mime_type,
                'content': file_content
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}", exc_info=True)
            return {
                'error': 'unknown',
                'message': "–û–π-–æ–π! üò± –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
            } 